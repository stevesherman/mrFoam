// -*- C++ -*-
// File generated by PyFoam - sorry for the ugliness

FoamFile
{
 version 2.0;
 format ascii;
 class dictionary;
 location "system";
 object calcDict;
}

#inputMode merge
ptot_inlet
{
  accumulations
    (
      sum
    );
  autoInterpolate yes;
  expression "ptot";
  outputControlMode timeStep;
  outputInterval 1;
  patchName inlet;
  type swakExpression;
  valueType patch;
  variables
    (
      "magU=mag(U);"
      "ptot=(p+0.5*magU*magU)*area()/sum(area());"
    );
  verbose yes;
  warnAutoInterpolate no;
}

p_inlet
{
  accumulations
    (
      sum
    );
  autoInterpolate yes;
  expression "p*area()/sum(area())";
  outputControlMode timeStep;
  outputInterval 1;
  patchName inlet;
  type swakExpression;
  valueType patch;
  verbose yes;
  warnAutoInterpolate no;
}

flux_inlet
{
  accumulations
    (
      sum
    );
  autoInterpolate yes;
  expression "phi";
  outputControlMode timeStep;
  outputInterval 1;
  patchName inlet;
  type swakExpression;
  valueType patch;
  verbose yes;
  warnAutoInterpolate no;
}

ptot_outlet
{
  accumulations
    (
      sum
    );
  autoInterpolate yes;
  expression "ptot";
  outputControlMode timeStep;
  outputInterval 1;
  patchName outlet;
  type swakExpression;
  valueType patch;
  variables
    (
      "magU=mag(U);"
      "ptot=(p+0.5*magU*magU)*area()/sum(area());"
    );
  verbose yes;
  warnAutoInterpolate no;
}

p_outlet
{
  accumulations
    (
      sum
    );
  autoInterpolate yes;
  expression "p*area()/sum(area())";
  outputControlMode timeStep;
  outputInterval 1;
  patchName outlet;
  type swakExpression;
  valueType patch;
  verbose yes;
  warnAutoInterpolate no;
}

flux_outlet
{
  accumulations
    (
      sum
    );
  autoInterpolate yes;
  expression "phi";
  outputControlMode timeStep;
  outputInterval 1;
  patchName outlet;
  type swakExpression;
  valueType patch;
  verbose yes;
  warnAutoInterpolate no;
}


ptot_x0
{
  accumulations
    (
      sum
    );
  autoInterpolate yes;
  expression "ptot";
  outputControlMode timeStep;
  outputInterval 1;
  type swakExpression;
  valueType faceZone;
  variables
    (
      "magU=mag(U);"
      "ptot=(p+0.5*magU*magU)*area()/sum(area());"
    );
  verbose yes;
  warnAutoInterpolate no;
  zoneName x0;
}

p_x0
{
  accumulations
    (
      sum
    );
  autoInterpolate yes;
  expression "p*area()/sum(area())";
  outputControlMode timeStep;
  outputInterval 1;
  type swakExpression;
  valueType faceZone;
  verbose yes;
  warnAutoInterpolate no;
  zoneName x0;
}

flux_x0
{
  accumulations
    (
      sum
    );
  autoInterpolate yes;
  expression "phi";
  outputControlMode timeStep;
  outputInterval 1;
  type swakExpression;
  valueType faceZone;
  verbose yes;
  warnAutoInterpolate no;
  zoneName x0;
}

